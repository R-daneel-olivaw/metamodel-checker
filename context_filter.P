% subscribe_event(c1,e1,"equal(3,3),equal(5,5)").

subscribe_event(Component_name,Event_id,Context_filter_expression):-
	assert(event_subscription_entry(Component_name,Event_id,Context_filter_expression)).

% compute([3,=,3],Result).
% compute([[3,=,3],&,[3,=,3]]).
% compute([[[5,=,3],or,[5,=,3]],or,[[5,=,5],or,[5,=,3]]]).
compute(Context_filter_expression):-
	compute_logic_molecule(Context_filter_expression).
	 
compute_logic_molecule([Term_1,Operator,Term_2|[]]):-
	write('term1 = '),write(Term_1),nl,
	write('term2 = '),write(Term_2),nl,
	
	(number(Term_1)->R1=Term_1;(compute_logic_molecule(Term_1)->R1 = true;R1 = fail)),
	(number(Term_2)->R2=Term_2;(compute_logic_molecule(Term_2)->R2 = true;R2 = fail)), 
	
	compute_logic(R1,Operator,R2).

compute_logic(R1,=,R2):-
	write(R1),write('='),write(R2),nl,
	(  R1 == R2
    -> true
    ;  fail
     ).
	
compute_logic(R1,>,R2):-
	write(R1),write('>'),write(R2),nl,
	(  R1 > R2
    -> true
    ;  fail
     ).
	
compute_logic(R1,<,R2):-
	write(R1),write('<'),write(R2),nl,
	(  R1 < R2
    -> true
    ;  fail
     ).

compute_logic(R1,=<,R2):-
	write(R1),write('=<'),write(R2),nl,
	(  R1 =< R2
    -> true
    ;  fail
     ).

compute_logic(R1,>=,R2):-
	write(R1),write('>='),write(R2),nl,
	(  R1 >= R2
    -> true
    ;  fail
     ).

compute_logic(R1,=\=,R2):-
	write(R1),write('=\='),write(R2),nl,
	(  R1 =\= R2
    -> true
    ;  fail
     ).
	
compute_logic(R1,&,R2):-
	write(R1),write('&'),write(R2),nl,
	(  R1,R2
    -> true
    ;  fail 
     ).
	
compute_logic(R1,or,R2):-
	write(R1),write(' or '),write(R2),nl,
	(  R1;R2
    -> true
    ;  fail 
     ).

%compute_logic_molecule(&,Result_1,Result_2,OpResult):-

%compute_logic_molecule(^,Result_1,Result_2,OpResult):-

%compute_logic_molecule(!,Result_1,Result_2,OpResult):-
	
	