% RECEIVER CONTEXT FILTER 
% mck(testContextFilter(1),filterNotBlocking)
% mck(testContextFilter(0),filterBlocking)

send_trigger_home_action_event ::=
	simulate_event_environment(true_remote_control_application,triggerHomeActionEvent,[triggerHomeActionEvent,[[action,setTemprature],[value,23]]])
	; action(sendTriggerHomeActionEvent)
	.

chk_received_trigger_home_action_event ::=
	hasComponentReceivedResult(smart_home_controller_unit,triggerHomeActionEvent,Result)
	; if (Result==1)
	then
	{
		action(receivedTriggerHomeActionEvent)
	}
	.

testContextFilter(Pass) ::=
	change_context_variable_value(mustTriggerHomeActionsContextElement,Pass)
	; send_trigger_home_action_event 
	| chk_received_trigger_home_action_event
	.

filterBlocking += contextFilterBlock1 /\ contextFilterBlock2.
contextFilterBlock1 += <sendTriggerHomeActionEvent>tt \/ <->contextFilterBlock1.
contextFilterBlock2 -= [receivedTriggerHomeActionEvent]ff /\ [-]contextFilterBlock2.

filterNotBlocking += contextFilterBlock1 /\ contextFilterNonBlock1.
contextFilterNonBlock1 += <receivedTriggerHomeActionEvent>tt \/ <->contextFilterNonBlock1.

% RECEIVER CONTEXT FILTER 

% BLOCKING RECEIVER CONTENT FILTER
% mck(testContentFilter,contentFilterBlocking).
% mck(testContentFilterNotBlocked,contentFilterNotBlocking).

send_alarm_event_blocked ::=
	simulate_event_component(alarm_application,user_cellphone,alarmGoesOffEvent,[alarmGoesOffEvent,[[dateTime,sometime]]])
	; action(sendBlockedAlarmEvent)
	.

send_alarm_event_not_blocked ::=
	simulate_event_component(alarm_application,user_cellphone,alarmGoesOffEvent,[alarmGoesOffEvent,[[dateTime,othertime]]])
	; action(sendBlockedAlarmEvent)
	.

chk_received_alarm_event ::=
	hasComponentReceivedResult(true_remote_control_application,alarmGoesOffEvent,Result)
	; if (Result==1)
	then
	{
		action(receivedAlarmEvent)
	}
	.

testContentFilter ::=
	send_alarm_event_blocked
	; chk_received_alarm_event
	.

testContentFilterNotBlocked ::=
	send_alarm_event_not_blocked
	; chk_received_alarm_event
	.

contentFilterBlocking += contentFilterBlock1 /\ contentFilterBlock2.
contentFilterBlock1 += <sendBlockedAlarmEvent>tt \/ <->contentFilterBlock1.
contentFilterBlock2 -= [receivedAlarmEvent]ff /\ [-]contentFilterBlock2.

contentFilterNotBlocking += contentFilterBlock1 /\ contentFilterNonBlock1.
contentFilterNonBlock1 += <receivedAlarmEvent>tt \/ <->contentFilterNonBlock1.

% BLOCKING RECEIVER CONTENT FILTER

% UNIQUE COMPONENTS
% mck(chk_duplicates,unique_all).

chk_duplicates ::=
	unique_environments
	; unique_components
	; unique_events
	; unique_advertisements
	; unique_subscriptions
	; unique_context_variables
	; unique_environment_component_relation.

unique_environments ::=
	all_environemtns([],All_env_list)
	; if (no_duplicates(All_env_list))
	then
	{
		action(noDuplicateEnv)
	}
	.

unique_components ::=
	all_components([],All_component_list)
	; if (no_duplicates(All_component_list))
	then
	{
		action(noDuplicateComponent)
	}
	.

unique_events ::=
	all_event_names([],All_event_list)
	; if (no_duplicates(All_event_list))
	then
	{
		action(noDuplicateEvent)
	}
	.

unique_advertisements ::=
	all_advertisements([],All_advertisement_list)
	; if (no_duplicates(All_advertisement_list))
	then
	{
		action(noDuplicateAdvertisement)
	}
	.

unique_subscriptions ::=
	all_subscriptions([],All_subscription_list)
	; if (no_duplicates(All_subscription_list))
	then
	{
		action(noDuplicateSubscription)
	}
	.

unique_context_variables ::=
	all_context_variables([],All_context_variable_list)
	; if (no_duplicates(All_context_variable_list))
	then
	{
		action(noDuplicateContextVariable)
	}
	.

unique_environment_component_relation ::=
	all_environment_component_relation([],All_environment_component_relation_list)
	; if (no_duplicates(All_environment_component_relation_list))
	then
	{
		action(noDuplicateEnvironmentComponentRelation)
	}
	.

unique_all += uniqueEnv /\ uniqueComponent /\ uniqueEvent /\ uniqueAdvertisement /\ uniqueSubscription /\ uniqueContextVariable /\ uniqueEnvironmentComponentRelation.

uniqueEnv += [-noDuplicateEnv]uniqueEnv /\ <->tt.
uniqueComponent += [-noDuplicateComponent]uniqueComponent /\ <->tt.
uniqueEvent += [-noDuplicateEvent]uniqueEvent /\ <->tt.
uniqueAdvertisement += [-noDuplicateAdvertisement]uniqueAdvertisement /\ <->tt.
uniqueSubscription += [-noDuplicateSubscription]uniqueSubscription /\ <->tt.
uniqueContextVariable += [-noDuplicateContextVariable]uniqueContextVariable /\ <->tt.
uniqueEnvironmentComponentRelation += [-noDuplicateEnvironmentComponentRelation]uniqueEnvironmentComponentRelation /\ <->tt.

% UNIQUE COMPONENTS

% VALID RELATIONS = ROLE INTEGRITY + ACTION INEGRITY
% mck(chk_all_relations,all_valid_relations).

chk_all_relations ::=
	chk_env_component_relation
	; chk_advertisement_relation
	; chk_subscription_relation
	; chk_context_variable_relation
	; chk_for_dual_role
	.

chk_env_component_relation ::=
	all_environment_component_relation_as_nested_lists([],All_environment_component_relation_list)
	; if (validate_env_component_relation_list(All_environment_component_relation_list))
	then
	{
		action(allValidEnvComponentRelation)
	}
	.

chk_advertisement_relation ::=
	all_advertisements_relation_as_nested_lists([],Advertisement_component_event_relation_list)
	; if(validate_advertisement_relation_list(Advertisement_component_event_relation_list))
	then
	{
		action(allValidAdvertisements)
	}
	.

chk_subscription_relation ::=
	all_subscription_relation_as_nested_lists([],Subscription_component_event_relation_list)
	; if(validate_subscription_relation_list(Subscription_component_event_relation_list))
	then
	{
		action(allValidSubscriptions)
	}
	.

chk_context_variable_relation ::=
	all_context_variable_relation_as_nested_lists([],Context_variable_relation_list)
	; if(validate_context_variable_relation_list(Context_variable_relation_list))
	then
	{
		action(allValidContextVariable)
	}
	.

chk_for_dual_role ::=
	all_subscription_relation_as_nested_lists([],Subscription_component_event_relation_list)
	; if(validate_no_dual_membership_list(Subscription_component_event_relation_list))
	then
	{
		action(allValidNoDualMembership)
	}
	.

all_valid_relations += valid_env_component_relations /\ valid_adv_relations /\ valid_subs_relations /\ valid_context_variable_relations /\ valid_no_dual_membership.

valid_env_component_relations += [-allValidEnvComponentRelation]valid_env_component_relations /\ <->tt.
valid_adv_relations += [-allValidAdvertisements]valid_adv_relations /\ <->tt.
valid_subs_relations += [-allValidSubscriptions]valid_subs_relations /\ <->tt.
valid_context_variable_relations += [-allValidContextVariable]valid_context_variable_relations /\ <->tt.
valid_no_dual_membership += [-allValidNoDualMembership]valid_no_dual_membership /\ <->tt.

% VALID RELATIONS

% FIDELITY
% mck(fidelity_chk,fidelity).
send_event_for_fidelity ::=
	simulate_event_environment(true_remote_control_application,triggerHomeActionEvent,[triggerHomeActionEvent,[[action,setTemprature],[value,23]]])
	; assert(event_fidelity_chk(true_remote_control_application,triggerHomeActionEvent,[triggerHomeActionEvent,[[action,setTemprature],[value,23]]]))
	.
	
receive_event_for_fidelity ::=
	hasComponentReceivedResult(smart_home_controller_unit,triggerHomeActionEvent,Result)
	; if (Result==1)
	then
	{
		triggered(smart_home_controller_unit,triggerHomeActionEvent,Event_data)
		; event_fidelity_chk(true_remote_control_application,triggerHomeActionEvent,Event_data_stored)
		
		; if (Event_data_stored == Event_data)
		then
		{
			action(fidelityTestPassed)
		}
		else
		{
			action(fidelityTestFailed)
		}
	}
	.
	
fidelity_chk ::=
	send_event_for_fidelity
	; receive_event_for_fidelity
	.

fidelity += never_fidelity_fail.
possible_fidelity_pass += <fidelityTestPassed>tt \/ <->possible_fidelity_pass.
never_fidelity_fail -= [fidelityTestFailed]ff /\ [-]never_fidelity_fail.

% FIDELITY

% CAUSALITY
% mck(send_before_receive_after,causality).

send_before_receive_after ::=
	change_context_variable_value(mustTriggerHomeActionsContextElement,Pass)
	; send_trigger_home_action_event
	; chk_received_trigger_home_action_event
	.

causality += [receivedTriggerHomeActionEvent]tt \/ ([-]causality /\ [a]tt).

% CAUSALITY

% VALID STATE WHILE EVENT IS TRAVERSED
% mck(runtime_validity,runtime_validity_property).

runtime_duplicates ::=
	send_trigger_home_action_event 
	| chk_duplicates
	.
	
runtime_relations ::=
	send_trigger_home_action_event 
	| chk_all_relations
	.

runtime_validity ::=
	send_trigger_home_action_event
	| chk_relations_duplicates
	.
	
chk_relations_duplicates ::=
	chk_all_relations
	; chk_duplicates
	.

runtime_duplicates_property += unique_all.
runtime_relations_property += all_valid_relations.
runtime_validity_property += unique_all /\ all_valid_relations.

% VALID STATE WHILE EVENT IS TRAVERSED

% SPONTANEOUS EVENT
% mck(chk_spontaneous_event, never_receive_spontaneous_event)

chk_spontaneous_event ::=
	cleanupComponentTriggPredicates(true_remote_control_application)
	; hasComponentReceivedResult(true_remote_control_application,alarmGoesOffEvent,Result)
	; if(Result == 1)
	then
	{
		action(spontaneousEventReceived)
	}
	.

never_receive_spontaneous_event -= [spontaneousEventReceived]ff /\ [-]never_receive_spontaneous_event.

% SPONTANEOUS EVENT

% EVENT WITHOUT ADVERTISEMENT
% mck(chk_event_without_advertisement, never_send_event_without_advertisement)

chk_event_without_advertisement ::=
	if (not(simulate_event_component(alarm_application,user_cellphone,resultOfHomeActionEvent,[resultOfHomeActionEvent,[[action,string],[value,string],[result,string]]])))
	then
	{
		action(unableToSendEventWithoutAdvertisement)
	}
	.
	
never_send_event_without_advertisement += [-unableToSendEventWithoutAdvertisement]never_send_event_without_advertisement /\ <->tt.

% EVENT WITHOUT ADVERTISEMENT

% EVENT WITH INVALID SCHEMA

chk_invalid_event_schema ::=
	if (not(simulate_event_environment(true_remote_control_application,triggerHomeActionEvent,[triggerHomeActionEvent,[[action,99],[value,23]]])))
	then
	{
		action(unableToSendEventWithInvalidSchema)
	}
	.
	
never_able_to_send_event_with_invalid_schema += [-unableToSendEventWithInvalidSchema]never_able_to_send_event_with_invalid_schema /\ <-> tt.

% EVENT WITH INVALID SCHEMA'

% EVENT WITHOUT SUBSCRIPTION

chk_event_without_subscription ::=
	simulate_event_environment(true_remote_control_application,notifyUserOfCarEngineStartedEvent,[notifyUserOfCarEngineStartedEvent,[[result,1]]])
	; hasComponentReceivedResult(smart_home_controller_unit,notifyUserOfCarEngineStartedEvent,Result)
	; if (Result == 1)
	then
	{
		action(receivedEventWithoutSubscription)
	}
	.
	
never_receive_event_without_subscription -= [receivedEventWithoutSubscription]ff /\ [-]never_receive_event_without_subscription.

% EVENT WITHOUT SUBSCRIPTION

% NON EXISTANT COMPONENT CANNOT RECEIVE

chk_cannot_send_non_exist_component ::=
	if(not(simulate_event_component(non_existent_component,user_cellphone,alarmGoesOffEvent,[alarmGoesOffEvent,[[dateTime,othertime]]])))
	then
	{
		action(nonExistentComponentUnableToSendEvent)
	}
	.

never_send_event_non_existent_component += [-nonExistentComponentUnableToSendEvent]never_send_event_non_existent_component /\ <->tt.

% NON EXISTANT COMPONENT CANNOT RECEIVE

% COMPONENT CANNOT SEND EVENT THAT IS NOT DEFINED

chk_cannot_send_non_exist_event ::=
	if (not(simulate_event_environment(true_remote_control_application,nonExistentEvent,[nonExistentEvent,[[action,99],[value,23]]])))
	then
	{
		action(unableToSendUndefinedEvent)
	}
	.
	
never_send_undefined_event += [-unableToSendUndefinedEvent]never_send_undefined_event /\ <->tt.

% COMPONENT CANNOT SEND EVENT THAT IS NOT DEFINED

% COMPONENT CANNOT RECEIVE AN EVENT FOR WHICH A SCHEMA IS NOT DEFINED

chk_cannot_receive_undefined_event ::=
	cleanupComponentTriggPredicates(true_remote_control_application)
	; hasComponentReceivedResult(true_remote_control_application,undefined_event_type,Result)
	; if(Result == 1)
	then
	{
		action(undefinedEventReceived)
	}
	.

never_receive_undefined_event -= [undefinedEventReceived]ff /\ [-]never_receive_undefined_event.

% COMPONENT CANNOT RECEIVE AN EVENT FOR WHICH A SCHEMA IS NOT DEFINED

% UNDEFINED COMPONENT CANNOT RECEIVE EVENT

chk_undefined_component_cannot_receive_event ::=
	simulate_event_environment(true_remote_control_application,notifyUserOfCarEngineStartedEvent,[notifyUserOfCarEngineStartedEvent,[[result,1]]])
	; cleanupComponentTriggPredicates(undefined_component)
	; hasComponentReceivedResult(undefined_component,notifyUserOfCarEngineStartedEvent,Result)
	; if(Result == 1)
	then
	{
		action(undefinedComponentReceivedEvent)
	}
	.
	
never_receive_event_undefined_component -= [undefinedComponentReceivedEvent]ff /\ [-]never_receive_event_undefined_component.
