% import append/3 from basics.
% import length/2 from basics.
% top_event(temperature).
% [temperature,[[temp,integer],location,[[latitude,float],[longitude,float],time,[[hh,integer],[mm,integer],[ss,integer]]],[dummy,integer]]]
% unify_event([temperature,[[temp,12],location,[[latitude,9.1],[longitude,9.1],time,[[hh,12],[mm,12],[ss,12]]],[dummy,12]]]).

lower_event([Key,Value|[]],I,O):-
	not(event_schema([Key|SchemaTail])),
	not(event_schema([Value|SchemaTail])),
	not(is_list(Key)),
	not(is_list(Value)),
	
	%nl,write(Key),write('-'),write(Value),nl,
	Kvp = [Key,Value],
	append(I,[Kvp],O).

lower_event([Head|[]],I,O):-
	lower_event(Head,I,O).

lower_event([Head|Tail],I,O):-
	lower_event(Head,I,Os1),
	lower_event(Tail,Os1,O).

lower_event(Type,I,O):-
	event_schema([Type|SchemaTail]),
	%write(Type),write('->'),
	append(I,[Type],Os1),
	%write([SchemaTail]),nl,
	lower_event(SchemaTail,[],Os2),
	append(Os1,[Os2],O).

lower_event(Type,I,O):-
	not(event_schema([Type|SchemaTail])),
	%write(Type),write('*-'),nl,
	append(I,[Type],O).
	
step_forward([Head|[]]).
	
step_forward([Head|Tail]):-
	%write(Head),
	lower_event(Head),
	step_forward(Tail).
	
top_event(Type,O):-
	write('Resolving Schema'),nl,
	lower_event(Type,[],O).
	
unify_event(Event):-
	write('Start'),nl,
	[Eh|Et] = Event,
	top_event(Eh,Schema),
	write('Schema Decided'),nl,
	!,unify_length(Event,Schema),
	write('length compared'),nl,
	!,compare_elements(Event,Schema),
	write('Schema compared'),nl.

compare_elements([Eh|[]],[Sh|[]]):-
	%write('End'),nl,
	!,compare_elements(Eh,Sh).
	
compare_elements([Eh|Et],[Sh|St]):-
	%write('middle'),nl,
	!,compare_elements(Eh,Sh),
	compare_elements(Et,St).
	
compare_elements(Eventelement,integer):-
	%write('comparing-integer => '),write(Eventelement),write('='),write(integer),nl,
	!,integer(Eventelement).
	
compare_elements(Eventelement,float):-
	%write('comparing-float => '),write(Eventelement),write('='),write(float),nl,
	!,float(Eventelement).

compare_elements(Eventelement,string):-
	%write('comparing-string => '),write(Eventelement),write('='),write(string),nl,
	!,string(Eventelement).
	
compare_elements(Sameelement,Sameelement).
	
unify_length(Event,Schema):-
	flatten2(Schema,FlatSchema),
	flatten2(Event,FlatEvent),
	length(FlatSchema,Lengthschema),		 	
 	length(FlatEvent,Lengthevent),
 	Lengthschema=Lengthevent.
	
flatten2([], []) :- !.
flatten2([L|Ls], FlatL) :-
    !,
    flatten2(L, NewL),
    flatten2(Ls, NewLs),
    append(NewL, NewLs, FlatL).
flatten2(L, [L]).

% DEFINATION OF THE SCHEMA ELEMENTS
event_schema([temperature,[temp,integer],location,[dummy,integer]]).
event_schema([location,[latitude,float],[longitude,float],time]).
event_schema([time,[hh,integer],[mm,integer],[ss,integer]]).
event_schema([weather,[location_name,string],[country,string],temperature]).
	